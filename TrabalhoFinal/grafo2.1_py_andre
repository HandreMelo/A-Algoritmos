grafo = {}
entregas = {}
lucro = 0
tempo = 0
def ler_arquivo():
    vetor_ler = []
    arquivo_destino = open('grafo.txt', 'r')
    for linha in arquivo_destino:
        vetor_ler.append(linha.strip())        

    arquivo_destino.close()

    for i in range(len(vetor_ler)):
        vetor_ler[i] = vetor_ler[i].replace("'", "").replace("‘","").replace("’","")

    pesos = []
    vertices = []
    ler_entregas = []

    n = int(vetor_ler[0])
    e = int(vetor_ler[n+2])
    #entregas.append(e);
    
    for i in range(2,n+2):
        pesos.append(vetor_ler[i].split(','))

    for i in range(0,e):
        ler_entregas.append(vetor_ler[n+3+i].split(','))

    for i in range(e):
       entregas[ler_entregas[i][1]] = [ler_entregas[i][0],ler_entregas[i][2]]

    vertices.append(vetor_ler[1].split(','))
    vertices = vertices[0]

    adjacentes=[]
    pesos_temp=[]
    
    for i in range(n):
        for j in range(n):
            if pesos[i][j] != '0':
               adjacentes.append(vertices[j])
               pesos_temp.append(pesos[i][j])
        grafo[vertices[i]] = [adjacentes,pesos_temp]
        adjacentes=[]
        pesos_temp=[]
#########MENOR CAMINHO################
def menor_caminho(caminhos):
   if caminhos:  # Se a lista não estiver vazia
      print('Todos os caminhos possiveis: ', caminhos)
      peso_vvk=0
      peso_antes=999999
      no_caminho = 0
      i=0
      for i in range(len(caminhos)):
         print('Caminho no : ' + str(i))
         for j in range(len(caminhos[i])-1):
            vertice_key = caminhos[i][j] #um vertice 'A':
            adjacente_vk = caminhos[i][j+1]
            valores_vk = grafo[vertice_key] #valores desse vertice 'A': -> [['B','C']['1','2']]
            indice_adj = valores_vk[0].index(adjacente_vk)
            print('>'+valores_vk[1][indice_adj])
            peso_vvk += int(valores_vk[1][indice_adj])
         if peso_vvk<peso_antes:
            #print(peso_vvk)
            peso_antes=peso_vvk
            peso_vvk=0
            no_caminho = i
      tempo = peso_antes #tempo para este caminho, para ver se da tempo para outra entrega
      print('Menor caminho : ' + str(caminhos[i]))
      print('Menor peso : ' + str(peso_antes))
   else:
      print('Este caminho não é possível')
   return caminhos[i],tempo

#########MOSTRAR CAMINHO################
def mostrar_listas():
   print("----Grafo-----")
   print(grafo)
   print("---Entregas---")
   print(entregas)
   print("--------------")

def depth_dirst_search(dicionario, inicio, fim):
   print(dicionario[inicio])
   pilha = [(inicio, [inicio])]
   while pilha:
       vertice, caminho = pilha.pop()
       for proximo in set(dicionario[vertice][0]) - set(caminho):
           if proximo == fim:
               yield caminho + [proximo]
           else:
               pilha.append((proximo, caminho + [proximo]))

#A set is an unordered collection with no duplicate elements. 
#Basic uses include membership testing and eliminating duplicate entries.


def sair():
   return ""


#entrega exemplo
#entregas = { 'vertice':['tempo_saida','lucro_da_entrega'],...}
#entregas = {'B': ['0', '1'], 'C': ['5', '10'], 'D': ['10', '8']}
caminho_lucro = []

def fazer_entrega():
   lucro = 0
   tempo_pass = 0

   for fim in list(entregas.keys()):
      
      tempo_saida = int(entregas[fim][0])
      lucro_da_entrega = int(entregas[fim][1])
      
      if ( tempo_saida >= tempo_pass):
         m_caminho,tempo = menor_caminho(list(depth_dirst_search(grafo, 'A', fim)))
         lucro += lucro_da_entrega
         caminho_lucro.append(m_caminho)
         caminho_lucro.append(entregas[fim][1])
         tempo_pass += (2*tempo)
         print("Tempo Passado")
         print(tempo_pass)
         
   print("Caminhos lucrativos")
   print(caminho_lucro)
   print("Lucro Total: " + str(lucro))
      
lista_vertices = []
ler_arquivo()

def main():
   
   while (True):

      print('Digite 1: Mostrar o grafo e a lista de entregas')
      print('Digite 2: Fazer Entregas:')
      print('Digite 0: Sair')
      argument = input()
      
      if argument == '0':
          print('Programa Finalizado')
          break

      elif argument == '1':
          mostrar_listas()
          
      elif argument == '2':  
         fazer_entrega()
         
      else:
          print('Valor incorreto')

if __name__ == "__main__":
   main()
